###############################################################
# This file contains the verb definitions for broot
#
# Some verbs here are examples and not enabled by default: you
#  need to uncomment them if you want to use them.
#
# Documentation at https://dystroy.org/broot/verbs/
###############################################################

# https://github.com/Canop/broot/blob/main/resources/default-conf/verbs.hjson

verbs: [

    {
        invocation: edit
        shortcut: e
        key: ctrl-e
        apply_to: text_file
        execution: "nvim +{line} {file}"
        leave_broot: false
    }
    # {
    #     name: edit-code
    #     key: enter
    #     extensions: [ hjson js json justfile justfile kdl lua makefile md nu py rs toml ts txt yaml yml ]
    #     execution: "nvim +{line} {file}"
    #     working_dir: "{root}"
    #     leave_broot: false
    # }
    {
        name: open-in-visual-studio
        shortcut: vs
        extensions: [ "rs", "c", "cpp", "h", "hpp" ]
        execution: "cmd /c start \"\" \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Common7\\IDE\\devenv.exe\" /Edit \"{file}\" &"
        working_dir: "{root}"
        leave_broot: false
    }
    {
        name: open-maxpat
        key: enter
        extensions: [ "maxpat", "maxhelp" ]
        execution: "wezterm cli spawn -- nu -e \"Max {file}\""
        working_dir: "{root}"
        leave_broot: false
    }

    # creating a new file without leaving broot
    {
        name: touch
        invocation: touch {new_file}
        execution: "touch {directory}/{new_file}"
        leave_broot: false
    }

    # A convenient shortcut to create new text files in
    #  the current directory or below
    {
        invocation: create {subpath}
        execution: "$EDITOR {directory}/{subpath}"
        leave_broot: false
    }

    {
        invocation: git_diff
        shortcut: gd
        leave_broot: false
        execution: "git difftool -y {file}"
    }

    # On ctrl-b, propose the creation of a copy of the selection.
    # While this might occasionally be useful, this verb is mostly here
    # as an example to demonstrate rare standard groups like {file-stem}
    # and {file-dot-extension} and the auto_exec verb property which
    # allows verbs to stay unexecuted until you hit enter
    {
        invocation: "backup {version}",
        key: "ctrl-b",
        leave_broot: false,
        auto_exec: false
        execution: "cp -r {file} {parent}/{file-stem}-back_{version}{file-dot-extension}"
    }

    # Only available when a directory is selected,
    # Copies this directory with a name partially composed from
    # the command and focus the new directory in a new panel
    {
        name: "backup"
        invocation: "bu {version}"
        cmd: ":cp {file}-back_{name};:!focus {file}-back_{version}"
        apply_to: directory
    }


    # By default, `rm` does the system rm, and completely removes
    # the file. If you prefer to have the file moved to the system
    # trash, you may use the ':trash' internal with the verb below:
    # {
    #     invocation: "rm"
    #     internal: "trash"
    #     leave_broot: false
    # }

    # This verb lets you launch a terminal on ctrl-T
    # (on exit you'll be back in broot)
    # { invocation: "terminal", key: "ctrl-t", execution: "$SHELL", set_working_dir: true, leave_broot: false }

    # Add to stage and move
    { invocation: "stage_go_next", key: "ctrl-j", cmd: ":toggle_stage;:next_match" }
    { invocation: "stage_go_next", key: "ctrl-k", cmd: ":toggle_stage;:previous_match" }

    # Here's an example of a verb needing the shell capabilities.
    # It copies all children of the currently selected directory
    #  to a destination you type.
    # It uses a star, which needs the shell for expansion. That's
    #  why such verb must have the `from_shell: true` parameter.
    { invocation: "cpa {dest}", external: "cp -r {directory}/* {dest}", from_shell: true }

    # Here's an example of a shortcut bringing you to your home directory
    { key: "ctrl-f", cmd: ":toggle_files" }

    { invocation: "~", internal: ":focus ~"  }

    # Here's going to the work-dir root of the current git repository
    { invocation: "cdroot", execution: ":focus {git-root}" }

    # A popular set of shortcuts for going up and down:
    #
    { key: "ctrl-p", execution: ":line_up" }  # previous line
    { key: "ctrl-n", execution: ":line_down" } # next line
    { key: "ctrl-u", execution: ":page_up" }
    { key: "ctrl-d", execution: ":page_down" }

    # broot defaults ctrl- conflicts with macos shortcuts, thus adding this:
    { key: "ctrl-1", execution: ":panel_left_no_open" }
    { key: "ctrl-2", execution: ":panel_right" }

    { key: "ctrl-r", execution: ":focus {initial-root}" }
    { key: "ctrl-up", internal: ":focus .." }
    { // make :go an alias of :focus
        invocation: "go {path}",
        internal: ":focus {path}"
    }

]

